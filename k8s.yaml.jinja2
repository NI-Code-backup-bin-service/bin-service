---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ appname }}
  namespace: {{ namespace }}
  labels:
    app: {{ appname }}
    team: digitalplatform
spec:
  replicas: {{ replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ appname }}
  template:
    metadata:
      labels:
        app: {{ appname }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: agentpool
                operator: In
                values:
                - apppool
                - agentpool1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: {{ appname }}
            topologyKey: kubernetes.io/hostname
      containers:
      - name: {{ appname }}
        image: {{ docker_registry }}/{{ appname }}:{{ version }}
        imagePullPolicy: Always
        resources:
          limits:
            memory: "{{ memory_limits }}"
            cpu: {{ cpu_limits }}
          requests:
            memory: "{{ memory_requests }}"
            cpu: {{ cpu_requests }}
        env:
          - name: JAVA_OPTS
            value: {{ java_opts }}
          - name: DOMAIN
            value: {{ domain }}
          - name: APP_LOG_LEVEL
            value: INFO
        args:
          - '--bin-config.includeMadaSchemeBins={{ include_mada_scheme_bins }}'
          {% for bin_info in test_bin_info -%}
          - '--test-bin-info.testBins[{{ loop.index0 }}].bin={{ bin_info.bin }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].cardBrand={{ bin_info.cardBrand }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].issuingOrg={{ bin_info.issuingOrg }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].cardType={{ bin_info.cardType }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].cardCategory={{ bin_info.cardCategory }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].issuingCountryIsoName={{ bin_info.issuingCountryIsoName }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].issuingCountry={{ bin_info.issuingCountry }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].issuingCountryIsoA3Code={{ bin_info.issuingCountryIsoA3Code }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].issuingCountryCode={{ bin_info.issuingCountryCode }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].issuingOrganizationWebsite={{ bin_info.issuingOrganizationWebsite }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].issuingOrganizationPhoneNumber={{ bin_info.issuingOrganizationPhoneNumber }}'
          - '--test-bin-info.testBins[{{ loop.index0 }}].cardDesignation={{ bin_info.cardDesignation }}'
          {% endfor %}
          
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 5
          httpGet:
            path: /actuator/health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 5
        livenessProbe:
          timeoutSeconds: 5
          httpGet:
            path: /actuator/info
            port: http
          initialDelaySeconds: 250
          periodSeconds: 5
          failureThreshold: 5
      dnsConfig:
        options:
        - name: single-request-reopen
        - name: ndots
          value: "1"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ appname }}
    monitoring: spring-boot
  name: {{ appname }}
  namespace: {{ namespace }}
spec:
  ports:
  - port: 80
    name: http
    protocol: TCP
    targetPort: http
  - port: 8080
    name: http-alt
    protocol: TCP
    targetPort: http
  selector:
    app: {{ appname }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ appname }}-internal
  namespace: {{ namespace }}
  annotations:
    kubernetes.io/ingress.class: nginx-internal
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    {%  if cluster_name == "ksa" %}
- {{ appname }}.internal.{{ domain }}
    {% else %}
- {{ appname }}.internal.{{ region_id }}.{{ environment }}.{{ domain }}
    {% endif %}
secretName: tls-secret-wildcard-cert-internal
  rules:
  {%  if cluster_name == "ksa" %}
- host: {{ appname }}.internal.{{ domain }}
  {% else %}
- host: {{ appname }}.internal.{{ region_id }}.{{ environment }}.{{ domain }}
  {% endif %}
  http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: {{ appname }}
            port:
              name: http
